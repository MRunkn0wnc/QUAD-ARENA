from flask import Flask, render_template, request, redirect, url_for, make_response, jsonify
import jwt, time

app = Flask(__name__)
app.secret_key = 'super-secret-key'

# Simulated database
users = {
    1: {'username': 'admin', 'password': 'admin@123', 'is_admin': True},
    2: {'username': 'user1', 'password': 'user1@123', 'is_admin': False}
}

username_to_id = {v['username']: k for k, v in users.items()}

with open("flag.txt") as f:
    FLAG = f.read().strip()

def generate_token(user_id):
    payload = {
        'id': user_id,
        'exp': time.time() + 3600
    }
    return jwt.encode(payload, app.secret_key, algorithm='HS256')

def decode_token(token):
    return jwt.decode(token, app.secret_key, algorithms=['HS256'])

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        uname = request.form['username']
        passwd = request.form['password']
        if uname in username_to_id:
            return "Username already exists!"
        uid = max(users.keys()) + 1
        users[uid] = {'username': uname, 'password': passwd, 'is_admin': False}
        username_to_id[uname] = uid
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        uname = request.form['username']
        passwd = request.form['password']
        if uname in username_to_id and users[username_to_id[uname]]['password'] == passwd:
            token = generate_token(username_to_id[uname])
            resp = make_response(redirect(url_for('index')))
            resp.set_cookie('auth', token)
            return resp
        return "Invalid credentials!"
    return render_template('login.html')

@app.route('/api/user/<int:user_id>', methods=['GET'])
def get_user_data(user_id):
    token = request.cookies.get('auth')
    if not token:
        return jsonify({'error': 'Unauthorized'}), 401
    try:
        data = decode_token(token)
        if user_id not in users:
            return jsonify({'error': 'User not found'}), 404
        user = users[user_id]
        if user['is_admin']:
            return jsonify({'user': user['username'], 'secret': FLAG})
        return jsonify({'user': user['username'], 'bio': 'This is a regular user.'})
    except jwt.ExpiredSignatureError:
        return jsonify({'error': 'Token expired'}), 403
    except jwt.InvalidTokenError:
        return jsonify({'error': 'Invalid token'}), 403

if __name__ == '__main__':
    app.run(debug=True)
