from flask import Flask, request, render_template, redirect, make_response
import jwt

app = Flask(__name__)
SECRET_KEY = 'supersecret'  # Used for HS256

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login', methods=['POST'])
def login():
    username = request.form.get('username', '')
    payload = {'user': username, 'role': 'user'}
    token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')
    if isinstance(token, bytes):  # pyjwt >= 2 returns string, older returns bytes
        token = token.decode()
    resp = make_response(redirect('/'))
    resp.set_cookie('auth', token)
    return resp

@app.route('/admin')
def admin():
    token = request.cookies.get('auth')
    try:
        # vulnerable decode using 'none' and skipping signature verification
        decoded = jwt.decode(token, SECRET_KEY, algorithms=['HS256', 'none'], options={"verify_signature": False})
        if decoded.get('role') == 'admin':
            with open("flag.txt") as f:
                flag = f.read()
            return render_template('admin.html', flag=flag)
        else:
            return redirect('/unauthorized')
    except Exception as e:
        print(e)
        return redirect('/unauthorized')

@app.route('/unauthorized')
def unauthorized():
    return render_template('unauthorized.html')

if __name__ == '__main__':
    app.run(debug=True)
